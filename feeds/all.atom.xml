<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The Trans Pythonista</title><link href="https://meatlo.af/" rel="alternate"></link><link href="https://meatlo.af/feeds/all.atom.xml" rel="self"></link><id>https://meatlo.af/</id><updated>2019-02-01T00:00:00-07:00</updated><entry><title>A simple post</title><link href="https://meatlo.af/2019/02/01/a-simple-post/" rel="alternate"></link><published>2019-02-01T00:00:00-07:00</published><updated>2019-02-01T00:00:00-07:00</updated><author><name>Erin O'Connell</name></author><id>tag:meatlo.af,2019-02-01:/2019/02/01/a-simple-post/</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hello! My name is Erin O&amp;#8217;Connell. This will eventially contain more personal&amp;nbsp;entries.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hello! My name is Erin O&amp;#8217;Connell. This will eventially contain more personal&amp;nbsp;entries.&lt;/p&gt;</content><category term="python"></category><category term="code"></category></entry><entry><title>pep 572 the assignment operator</title><link href="https://meatlo.af/2019/02/01/pep-572-the-assignment-operator/" rel="alternate"></link><published>2019-02-01T00:00:00-07:00</published><updated>2019-02-01T00:00:00-07:00</updated><author><name>Erin O'Connell</name></author><id>tag:meatlo.af,2019-02-01:/2019/02/01/pep-572-the-assignment-operator/</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0572/"&gt;&lt;span class="caps"&gt;PEP&lt;/span&gt; 572&lt;/a&gt;. Love it or hate it (you should &lt;em&gt;love&lt;/em&gt; it), it is now merged into python and will be released in python 3.8. I had an initial negative reaction to this &lt;span class="caps"&gt;PEP&lt;/span&gt;, however I&amp;#8217;ve come around! When this &lt;span class="caps"&gt;PEP&lt;/span&gt; was proposed, I was not coding in …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0572/"&gt;&lt;span class="caps"&gt;PEP&lt;/span&gt; 572&lt;/a&gt;. Love it or hate it (you should &lt;em&gt;love&lt;/em&gt; it), it is now merged into python and will be released in python 3.8. I had an initial negative reaction to this &lt;span class="caps"&gt;PEP&lt;/span&gt;, however I&amp;#8217;ve come around! When this &lt;span class="caps"&gt;PEP&lt;/span&gt; was proposed, I was not coding in python full time. I was working on pipenv during my spare time and I didn&amp;#8217;t see much use for it, hence I found it an unnessasary addition. I now have a job where I code in python full time and I have seen many places in our code base where this can be&amp;nbsp;used!&lt;/p&gt;
&lt;p&gt;The aim of this post is to show how it can be very useful, and that change, while scary, can be a good thing! Any time I find a use for it in any code base I work on, I&amp;#8217;ll make an entry to this post! Let&amp;#8217;s get&amp;nbsp;started!&lt;/p&gt;
&lt;h2&gt;What is&amp;nbsp;it?&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;PEP&lt;/span&gt; 572, entitled assignment expressions, adds a way to assign variables within an expression. The operator to do this is &lt;code&gt;:=&lt;/code&gt;, or as some people have been calling it, the walrus operator. Let&amp;#8217;s look at a simple&amp;nbsp;example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# without assignment operator&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^FOO&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FOOBAR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# with the assignment operator&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^FOO&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FOOBAR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a very simple example, saving one line of code, although it&amp;#8217;s a pattern I use often at work. Let&amp;#8217;s break it&amp;nbsp;down…&lt;/p&gt;
&lt;p&gt;In the first code snippet, we are doing pretty standard stuff. We set &lt;code&gt;match&lt;/code&gt; equal to the result of &lt;code&gt;re.search()&lt;/code&gt;. Next if &lt;code&gt;match&lt;/code&gt; is not a &lt;code&gt;NoneType&lt;/code&gt; print out the first group. Let&amp;#8217;s save a line of code by introducing the assingment operator. Instead of assigning &lt;code&gt;match&lt;/code&gt; first, we assign it in a conditional expresion. It basically reads match becomes the retured value of &lt;code&gt;re.search()&lt;/code&gt; and then the contional is evalluated against the value of &lt;code&gt;match&lt;/code&gt; which also becomes a valriable in the current scope. Again this is am extremely trivial example. I could write some made up super complicated ways to use the assignment operator, however that&amp;#8217;s not real life, that&amp;#8217;s not how I&amp;#8217;m going to use the assingment operator, at least not at this time. I would reccomend reading &lt;a href="https://www.python.org/dev/peps/pep-0572/#the-importance-of-real-code"&gt;the importance of real code&lt;/a&gt; from the &lt;span class="caps"&gt;PEP&lt;/span&gt; 572 proposal. That is one of the reasons I wanted to make this blog post. I want to post actual examples from code bases I work on, where it just makes sense to use the assignment&amp;nbsp;operator.&lt;/p&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;h4&gt;While&amp;nbsp;Loops&lt;/h4&gt;
&lt;p&gt;Old:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;source.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dest.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;chunk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;True:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;source.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dest.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;More to come as I work through more of my code&amp;nbsp;bases!&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Other&amp;nbsp;examples&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/python/cpython/pull/8095/files"&gt;This&lt;/a&gt; &lt;span class="caps"&gt;PR&lt;/span&gt; has a lot of examples of places in the standard library where the assignment operator is being used with while statements in python 3.8. Similiarly &lt;a href="https://github.com/python/cpython/pull/8097/files"&gt;this&lt;/a&gt; &lt;span class="caps"&gt;PR&lt;/span&gt; contains places in the standard library where the assignment operator is being used for match/group capture along with &lt;a href="https://github.com/python/cpython/pull/8098/files"&gt;this&lt;/a&gt; &lt;span class="caps"&gt;PR&lt;/span&gt; contains examples of using the assignment operator in a list&amp;nbsp;comprehension.&lt;/p&gt;</content><category term="python"></category><category term="code"></category></entry></feed>